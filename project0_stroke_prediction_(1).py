# -*- coding: utf-8 -*-
"""project0-stroke-prediction (1).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1yoOwUZw5-eKG-JD9ZOOil_ZTYn3Ioext
"""

import numpy as np
import pandas as pd
import streamlit as st
import matplotlib.pyplot as plt
from sklearn.ensemble import RandomForestClassifier
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import cross_val_score
from sklearn.model_selection import train_test_split
from sklearn.metrics import roc_curve, roc_auc_score, auc
from sklearn.preprocessing import StandardScaler, LabelEncoder
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix




data = pd.read_csv('https://raw.githubusercontent.com/AfEtaiwi02/FirstProject/main/healthcare-dataset-stroke-data.csv')  # Use the correct file path or URL

print(data.head())

print(data.info)

print(data.isnull().sum())

#Handling null values in BMI column

data['bmi'] = data['bmi'].fillna(data['bmi'].mean())

#Dropping the rows that have missing values

data = data.dropna(subset = ['bmi'])

label_columns = ['gender', 'ever_married', 'smoking_status']
label_encoder = LabelEncoder()

for col in label_columns:
    data[col] = label_encoder.fit_transform(data[col])

scaler = StandardScaler()

data[['age','avg_glucose_level','bmi']] = scaler.fit_transform(data[['age', 'avg_glucose_level', 'bmi']])

print(data.head)

data = pd.get_dummies(data, drop_first=True)


X = data.drop(['stroke','id'], axis = 1)
y = data['stroke']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 42)

model = LogisticRegression(class_weight='balanced')

model.fit(X_train, y_train)

y_pred = model.predict(X_test)

accuracy = accuracy_score(y_test, y_pred)
print(f'Accuracy: {accuracy*100:.2f}%')

print("Classification Report: ")
print(classification_report(y_test, y_pred))

print("Confusion Matrix: ")
print(confusion_matrix(y_test, y_pred))

model = RandomForestClassifier(class_weight='balanced', n_estimators=200, max_depth=10, random_state=42)

model.fit(X_train, y_train)

y_pred = model.predict(X_test)

accuracy = accuracy_score(y_test, y_pred)
print(f'Accuracy: {accuracy*100:.2f}%')

print("Classification Report:")
print(classification_report(y_test, y_pred))

print("Confusion Matrix:")
print(confusion_matrix(y_test, y_pred))

y_prob = model.predict_proba(X_test)[:,1]

fpr, tpr, _ = roc_curve(y_test, y_prob)

auc_score = auc(fpr, tpr)

plt.figure(figsize=(8, 6))
plt.plot(fpr, tpr, color='blue', label=f'ROC curve (AUC = {auc_score:.2f})')
plt.plot([0, 1], [0, 1], color='gray', linestyle='--')
plt.xlabel('False Positive Rate')
plt.ylabel('True Positive Rate')
plt.title('ROC Curve')
plt.legend(loc='lower right')
plt.show()

cv_scores = cross_val_score(model, X, y, cv = 5, scoring = 'accuracy')
print(f"Cross-validation scores: {cv_scores}")
print(f"Mean accuracy: {np.mean(cv_scores):.2f}")
